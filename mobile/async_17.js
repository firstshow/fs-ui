(this.webpackJsonpfsui=this.webpackJsonpfsui||[]).push([[17],{187:function(e,s,t){"use strict";t.r(s);var a=function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",[t("fs-group",{attrs:{title:"选择地区"}},[t("fs-input",{attrs:{placeholder:"请选择地区",type:"search"},on:{"on-search":function(s){e.show1=!0}},model:{value:e.formatAddress1,callback:function(s){e.formatAddress1=s},expression:"formatAddress1"}}),t("fs-linkage",{attrs:{data:e.currentData1,show:e.show1},on:{"update:show":function(s){e.show1=s},changeSelect:e.requestAddress1},model:{value:e.address1,callback:function(s){e.address1=s},expression:"address1"}})],1),t("fs-group",{attrs:{title:"带初始值"}},[t("fs-input",{attrs:{placeholder:"请选择地区",type:"search"},on:{"on-search":function(s){e.show2=!0}},model:{value:e.formatAddress2,callback:function(s){e.formatAddress2=s},expression:"formatAddress2"}}),t("fs-linkage",{attrs:{data:e.currentData2,show:e.show2},on:{"update:show":function(s){e.show2=s},changeSelect:e.requestAddress2},model:{value:e.address2,callback:function(s){e.address2=s},expression:"address2"}})],1)],1)};a._withStripped=!0;var n=t(150),r=t.n(n),d={data:function(){return{address1:[],address2:[{id:"220000",name:"吉林省"},{id:"220100",name:"长春市"},{id:"220113",name:"九台区"}],currentData1:[],currentData2:[],show1:!1,show2:!1}},computed:{formatAddress1:function(){return this.address1&&this.address1.length?this.address1.map(function(e){return e.name}).join("/"):""},formatAddress2:function(){return this.address2&&this.address2.length?this.address2.map(function(e){return e.name}).join("/"):""}},methods:{requestAddress1:function(e){var s=this,t=e.len,a=e.id;r.a.post("/api/public/get-city-json","type=".concat(t,"&code=").concat(a)).then(function(e){s.currentData1=e.data.data})},requestAddress2:function(e){var s=this,t=e.len,a=e.id;r.a.post("/api/public/get-city-json","type=".concat(t,"&code=").concat(a)).then(function(e){s.currentData2=e.data.data})}}},o=t(0),c=Object(o.a)(d,a,[],!1,null,null,null);c.options.__file="packages/linkage/demo/index.vue";s.default=c.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,