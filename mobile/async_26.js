(this.webpackJsonpfsui=this.webpackJsonpfsui||[]).push([[26],{233:function(t,l,e){"use strict";e.r(l);var s=function(){var t=this,l=t.$createElement,e=t._self._c||l;return e("div",[e("fs-group",{attrs:{title:"默认"}},[e("fs-collapse-group",{model:{value:t.collapse,callback:function(l){t.collapse=l},expression:"collapse"}},[e("fs-collapse",{attrs:{title:"标题一",name:"a"},on:{toggle:t.toggle}},[e("fs-button",[t._v("按钮")])],1),e("fs-collapse",{attrs:{title:"标题二",name:"b"},on:{toggle:t.toggle}},[e("fs-button",{attrs:{size:"large"}},[t._v("按钮")])],1),e("fs-collapse",{attrs:{title:""}},[e("template",{attrs:{name:"c"},on:{toggle:t.toggle},slot:"title"},[t._v("标题三")]),e("fs-button",{attrs:{type:"plain"}},[t._v("按钮")])],2)],1)],1),e("fs-group",{attrs:{title:"只展开一个"}},[e("fs-collapse-group",{attrs:{single:""},model:{value:t.collapse2,callback:function(l){t.collapse2=l},expression:"collapse2"}},[e("fs-collapse",{attrs:{title:"标题一",name:"a"},on:{toggle:t.toggle}},[e("fs-button",[t._v("按钮")])],1),e("fs-collapse",{attrs:{title:"标题二",name:"b"},on:{toggle:t.toggle}},[e("fs-button",{attrs:{size:"large"}},[t._v("按钮")])],1),e("fs-collapse",{attrs:{title:""}},[e("template",{attrs:{name:"c"},on:{toggle:t.toggle},slot:"title"},[t._v("标题三")]),e("fs-button",{attrs:{type:"plain"}},[t._v("按钮")])],2)],1)],1)],1)};s._withStripped=!0;var o={data:function(){return{collapse:[],collapse2:[]}},methods:{toggle:function(){console.log(this.collapse)}}},a=e(1),n=Object(a.a)(o,s,[],!1,null,null,null);n.options.__file="packages/collapse/demo/index.vue";l.default=n.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mc3VpLy4vcGFja2FnZXMvY29sbGFwc2UvZGVtby9pbmRleC52dWU/OWFjMCIsIndlYnBhY2s6Ly9mc3VpL3BhY2thZ2VzL2NvbGxhcHNlL2RlbW8vaW5kZXgudnVlIiwid2VicGFjazovL2ZzdWkvLi9wYWNrYWdlcy9jb2xsYXBzZS9kZW1vL2luZGV4LnZ1ZT9jNGFjIiwid2VicGFjazovL2ZzdWkvLi9wYWNrYWdlcy9jb2xsYXBzZS9kZW1vL2luZGV4LnZ1ZSJdLCJuYW1lcyI6WyJyZW5kZXIiLCJfdm0iLCJ0aGlzIiwiX2giLCIkY3JlYXRlRWxlbWVudCIsIl9jIiwiX3NlbGYiLCJhdHRycyIsInRpdGxlIiwibW9kZWwiLCJ2YWx1ZSIsImNvbGxhcHNlIiwiY2FsbGJhY2siLCIkJHYiLCJleHByZXNzaW9uIiwibmFtZSIsIm9uIiwidG9nZ2xlIiwiX3YiLCJzaXplIiwic2xvdCIsInR5cGUiLCJzaW5nbGUiLCJjb2xsYXBzZTIiLCJfd2l0aFN0cmlwcGVkIiwiY29sbGFwc2VfZGVtb3Z1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsImRhdGEiLCJtZXRob2RzIiwiY29uc29sZSIsImxvZyIsImNvbXBvbmVudCIsIk9iamVjdCIsImNvbXBvbmVudE5vcm1hbGl6ZXIiLCJvcHRpb25zIiwiX19maWxlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6InNHQUFBLElBQUFBLEVBQUEsV0FDQSxJQUFBQyxFQUFBQyxLQUNBQyxFQUFBRixFQUFBRyxlQUNBQyxFQUFBSixFQUFBSyxNQUFBRCxJQUFBRixFQUNBLE9BQUFFLEVBQ0EsT0FFQUEsRUFDQSxZQUNTRSxPQUFTQyxNQUFBLFFBRWxCSCxFQUNBLHFCQUVBSSxPQUNBQyxNQUFBVCxFQUFBVSxTQUNBQyxTQUFBLFNBQUFDLEdBQ0FaLEVBQUFVLFNBQUFFLEdBRUFDLFdBQUEsY0FJQVQsRUFDQSxlQUVBRSxPQUEwQkMsTUFBQSxNQUFBTyxLQUFBLEtBQzFCQyxJQUF1QkMsT0FBQWhCLEVBQUFnQixVQUV2QlosRUFBQSxhQUFBSixFQUFBaUIsR0FBQSxTQUNBLEdBRUFiLEVBQ0EsZUFFQUUsT0FBMEJDLE1BQUEsTUFBQU8sS0FBQSxLQUMxQkMsSUFBdUJDLE9BQUFoQixFQUFBZ0IsVUFHdkJaLEVBQUEsYUFBbUNFLE9BQVNZLEtBQUEsV0FDNUNsQixFQUFBaUIsR0FBQSxTQUdBLEdBRUFiLEVBQ0EsZUFDaUJFLE9BQVNDLE1BQUEsTUFFMUJILEVBQ0EsWUFFQUUsT0FBOEJRLEtBQUEsS0FDOUJDLElBQTJCQyxPQUFBaEIsRUFBQWdCLFFBQzNCRyxLQUFBLFVBRUFuQixFQUFBaUIsR0FBQSxTQUVBYixFQUFBLGFBQW1DRSxPQUFTYyxLQUFBLFdBQzVDcEIsRUFBQWlCLEdBQUEsU0FHQSxJQUdBLElBR0EsR0FFQWIsRUFDQSxZQUNTRSxPQUFTQyxNQUFBLFdBRWxCSCxFQUNBLHFCQUVBRSxPQUFzQmUsT0FBQSxJQUN0QmIsT0FDQUMsTUFBQVQsRUFBQXNCLFVBQ0FYLFNBQUEsU0FBQUMsR0FDQVosRUFBQXNCLFVBQUFWLEdBRUFDLFdBQUEsZUFJQVQsRUFDQSxlQUVBRSxPQUEwQkMsTUFBQSxNQUFBTyxLQUFBLEtBQzFCQyxJQUF1QkMsT0FBQWhCLEVBQUFnQixVQUV2QlosRUFBQSxhQUFBSixFQUFBaUIsR0FBQSxTQUNBLEdBRUFiLEVBQ0EsZUFFQUUsT0FBMEJDLE1BQUEsTUFBQU8sS0FBQSxLQUMxQkMsSUFBdUJDLE9BQUFoQixFQUFBZ0IsVUFHdkJaLEVBQUEsYUFBbUNFLE9BQVNZLEtBQUEsV0FDNUNsQixFQUFBaUIsR0FBQSxTQUdBLEdBRUFiLEVBQ0EsZUFDaUJFLE9BQVNDLE1BQUEsTUFFMUJILEVBQ0EsWUFFQUUsT0FBOEJRLEtBQUEsS0FDOUJDLElBQTJCQyxPQUFBaEIsRUFBQWdCLFFBQzNCRyxLQUFBLFVBRUFuQixFQUFBaUIsR0FBQSxTQUVBYixFQUFBLGFBQW1DRSxPQUFTYyxLQUFBLFdBQzVDcEIsRUFBQWlCLEdBQUEsU0FHQSxJQUdBLElBR0EsSUFHQSxJQUlBbEIsRUFBQXdCLGVBQUEsRUN6R0EsSUNsQzJMQyxHRG1DM0xDLEtBREEsV0FFQSxPQUNBZixZQUNBWSxlQUdBSSxTQUNBVixPQURBLFdBRUFXLFFBQUFDLElBQUEzQixLQUFBUyxvQkVwQ0FtQixFQUFnQkMsT0FBQUMsRUFBQSxFQUFBRCxDQUNkTixFQUNBekIsTUFFRixFQUNBLEtBQ0EsS0FDQSxNQXVCQThCLEVBQUFHLFFBQUFDLE9BQUEsbUNBQ2VDLEVBQUEsUUFBQUwiLCJmaWxlIjoiYXN5bmNfMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwiZnMtZ3JvdXBcIixcbiAgICAgICAgeyBhdHRyczogeyB0aXRsZTogXCLpu5jorqRcIiB9IH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiZnMtY29sbGFwc2UtZ3JvdXBcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNvbGxhcHNlLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHtcbiAgICAgICAgICAgICAgICAgIF92bS5jb2xsYXBzZSA9ICQkdlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJjb2xsYXBzZVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZnMtY29sbGFwc2VcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogXCLmoIfpopjkuIBcIiwgbmFtZTogXCJhXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IHRvZ2dsZTogX3ZtLnRvZ2dsZSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX2MoXCJmcy1idXR0b25cIiwgW192bS5fdihcIuaMiemSrlwiKV0pXSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZnMtY29sbGFwc2VcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogXCLmoIfpopjkuoxcIiwgbmFtZTogXCJiXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IHRvZ2dsZTogX3ZtLnRvZ2dsZSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImZzLWJ1dHRvblwiLCB7IGF0dHJzOiB7IHNpemU6IFwibGFyZ2VcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwi5oyJ6ZKuXCIpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImZzLWNvbGxhcHNlXCIsXG4gICAgICAgICAgICAgICAgeyBhdHRyczogeyB0aXRsZTogXCJcIiB9IH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwidGVtcGxhdGVcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6IFwiY1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgb246IHsgdG9nZ2xlOiBfdm0udG9nZ2xlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgc2xvdDogXCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCLmoIfpopjkuIlcIildXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJmcy1idXR0b25cIiwgeyBhdHRyczogeyB0eXBlOiBcInBsYWluXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIuaMiemSrlwiKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgICksXG4gICAgICBfYyhcbiAgICAgICAgXCJmcy1ncm91cFwiLFxuICAgICAgICB7IGF0dHJzOiB7IHRpdGxlOiBcIuWPquWxleW8gOS4gOS4qlwiIH0gfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJmcy1jb2xsYXBzZS1ncm91cFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBhdHRyczogeyBzaW5nbGU6IFwiXCIgfSxcbiAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNvbGxhcHNlMixcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7XG4gICAgICAgICAgICAgICAgICBfdm0uY29sbGFwc2UyID0gJCR2XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImNvbGxhcHNlMlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZnMtY29sbGFwc2VcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogXCLmoIfpopjkuIBcIiwgbmFtZTogXCJhXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IHRvZ2dsZTogX3ZtLnRvZ2dsZSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX2MoXCJmcy1idXR0b25cIiwgW192bS5fdihcIuaMiemSrlwiKV0pXSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZnMtY29sbGFwc2VcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogXCLmoIfpopjkuoxcIiwgbmFtZTogXCJiXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IHRvZ2dsZTogX3ZtLnRvZ2dsZSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImZzLWJ1dHRvblwiLCB7IGF0dHJzOiB7IHNpemU6IFwibGFyZ2VcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwi5oyJ6ZKuXCIpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImZzLWNvbGxhcHNlXCIsXG4gICAgICAgICAgICAgICAgeyBhdHRyczogeyB0aXRsZTogXCJcIiB9IH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwidGVtcGxhdGVcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6IFwiY1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgb246IHsgdG9nZ2xlOiBfdm0udG9nZ2xlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgc2xvdDogXCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCLmoIfpopjkuIlcIildXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX2MoXCJmcy1idXR0b25cIiwgeyBhdHRyczogeyB0eXBlOiBcInBsYWluXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIuaMiemSrlwiKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgIClcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIlxuPHRlbXBsYXRlPlxuPGRpdj5cbiAgPGZzLWdyb3VwIHRpdGxlPVwi6buY6K6kXCI+XG4gICAgPGZzLWNvbGxhcHNlLWdyb3VwIHYtbW9kZWw9XCJjb2xsYXBzZVwiPlxuICAgICAgPGZzLWNvbGxhcHNlIHRpdGxlPVwi5qCH6aKY5LiAXCIgbmFtZT1cImFcIiBAdG9nZ2xlPVwidG9nZ2xlXCI+XG4gICAgICAgIDxmcy1idXR0b24+5oyJ6ZKuPC9mcy1idXR0b24+XG4gICAgICA8L2ZzLWNvbGxhcHNlPlxuICAgICAgPGZzLWNvbGxhcHNlIHRpdGxlPVwi5qCH6aKY5LqMXCIgbmFtZT1cImJcIiBAdG9nZ2xlPVwidG9nZ2xlXCI+XG4gICAgICAgIDxmcy1idXR0b24gc2l6ZT1cImxhcmdlXCI+5oyJ6ZKuPC9mcy1idXR0b24+XG4gICAgICA8L2ZzLWNvbGxhcHNlPlxuICAgICAgPGZzLWNvbGxhcHNlIHRpdGxlPVwiXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwidGl0bGVcIiBuYW1lPVwiY1wiIEB0b2dnbGU9XCJ0b2dnbGVcIj7moIfpopjkuIk8L3RlbXBsYXRlPlxuICAgICAgICA8ZnMtYnV0dG9uIHR5cGU9XCJwbGFpblwiPuaMiemSrjwvZnMtYnV0dG9uPlxuICAgICAgPC9mcy1jb2xsYXBzZT5cbiAgICA8L2ZzLWNvbGxhcHNlLWdyb3VwPlxuICA8L2ZzLWdyb3VwPlxuICA8ZnMtZ3JvdXAgdGl0bGU9XCLlj6rlsZXlvIDkuIDkuKpcIj5cbiAgICA8ZnMtY29sbGFwc2UtZ3JvdXAgdi1tb2RlbD1cImNvbGxhcHNlMlwiIHNpbmdsZT5cbiAgICAgIDxmcy1jb2xsYXBzZSB0aXRsZT1cIuagh+mimOS4gFwiIG5hbWU9XCJhXCIgQHRvZ2dsZT1cInRvZ2dsZVwiPlxuICAgICAgICA8ZnMtYnV0dG9uPuaMiemSrjwvZnMtYnV0dG9uPlxuICAgICAgPC9mcy1jb2xsYXBzZT5cbiAgICAgIDxmcy1jb2xsYXBzZSB0aXRsZT1cIuagh+mimOS6jFwiIG5hbWU9XCJiXCIgQHRvZ2dsZT1cInRvZ2dsZVwiPlxuICAgICAgICA8ZnMtYnV0dG9uIHNpemU9XCJsYXJnZVwiPuaMiemSrjwvZnMtYnV0dG9uPlxuICAgICAgPC9mcy1jb2xsYXBzZT5cbiAgICAgIDxmcy1jb2xsYXBzZSB0aXRsZT1cIlwiPlxuICAgICAgICA8dGVtcGxhdGUgc2xvdD1cInRpdGxlXCIgbmFtZT1cImNcIiBAdG9nZ2xlPVwidG9nZ2xlXCI+5qCH6aKY5LiJPC90ZW1wbGF0ZT5cbiAgICAgICAgPGZzLWJ1dHRvbiB0eXBlPVwicGxhaW5cIj7mjInpkq48L2ZzLWJ1dHRvbj5cbiAgICAgIDwvZnMtY29sbGFwc2U+XG4gICAgPC9mcy1jb2xsYXBzZS1ncm91cD5cbiAgPC9mcy1ncm91cD5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb2xsYXBzZTogW10sXG4gICAgICBjb2xsYXBzZTI6IFtdXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29sbGFwc2UpXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNjExYmU5OCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL3dhbmdndWFud2VpL0Rlc2t0b3AvcHJvamVjdC9mcy11aS9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMTYxMWJlOTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMTYxMWJlOTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNjExYmU5OCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcxNjExYmU5OCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMvY29sbGFwc2UvZGVtby9pbmRleC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9