(this.webpackJsonpfsui=this.webpackJsonpfsui||[]).push([[39],{142:function(l,e,a){"use strict";a.r(e);var t=function(){var l=this,e=l.$createElement,a=l._self._c||e;return a("div",[a("fs-group",{attrs:{title:"基础"}},[a("fs-select",{attrs:{title:"全部菜单一"},model:{value:l.val1,callback:function(e){l.val1=e},expression:"val1"}},l._l(l.foodList1,function(e,t){return a("fs-option",{key:e.value,attrs:{value:e.value,disabled:1===t}},[l._v(l._s(e.label))])}),1),a("p",[l._v("val1: "+l._s(l.val1))])],1),a("fs-group",{attrs:{title:"禁用"}},[a("fs-select",{attrs:{title:"全部菜单一",disabled:""},model:{value:l.val2,callback:function(e){l.val2=e},expression:"val2"}},l._l(l.foodList2,function(e){return a("fs-option",{key:e.value,attrs:{value:e.value}},[l._v(l._s(e.label))])}),1)],1),a("fs-group",{attrs:{title:"分组"}},[a("fs-select-group",[a("fs-select",{attrs:{title:"跳转",to:"/input"},model:{value:l.val3,callback:function(e){l.val3=e},expression:"val3"}},l._l(l.foodList3,function(e){return a("fs-option",{key:e.value,attrs:{value:e.value}},[l._v(l._s(e.label))])}),1),a("fs-select",{attrs:{title:"菜单二"},model:{value:l.val3,callback:function(e){l.val3=e},expression:"val3"}},l._l(l.foodList3,function(e){return a("fs-option",{key:e.value,attrs:{value:e.value}},[l._v(l._s(e.label))])}),1),a("fs-select",{attrs:{title:"菜单三"},model:{value:l.val4,callback:function(e){l.val4=e},expression:"val4"}},l._l(l.foodList4,function(e){return a("fs-option",{key:e.value,attrs:{value:e.value}},[l._v(l._s(e.label))])}),1)],1),a("p",[l._v("val3: "+l._s(l.val3))]),a("p",[l._v("val4: "+l._s(l.val4))])],1)],1)};t._withStripped=!0;var s={data:function(){return{val1:1,val2:"",val3:"",val4:"",foodList1:[],foodList2:[{label:"馄饨",value:4},{label:"面条",value:5},{label:"烧饼",value:6}],foodList3:[{label:"春卷",value:7},{label:"粽子",value:8},{label:"豆浆",value:9}],foodList4:[{label:"春卷",value:10},{label:"粽子",value:11},{label:"豆浆",value:12}]}},created:function(){var l=this;setTimeout(function(){l.foodList1=[{label:"小笼包",value:1},{label:"饺子",value:2},{label:"油条",value:3}]},2e3)}},v=a(1),u=Object(v.a)(s,t,[],!1,null,null,null);u.options.__file="packages/select/demo/index.vue";e.default=u.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,