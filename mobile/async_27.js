(this.webpackJsonpfsui=this.webpackJsonpfsui||[]).push([[27],{155:function(t,l,e){"use strict";e.r(l);var s=function(){var t=this,l=t.$createElement,e=t._self._c||l;return e("div",[e("fs-group",{attrs:{title:"默认"}},[e("fs-collapse-group",{model:{value:t.collapse,callback:function(l){t.collapse=l},expression:"collapse"}},[e("fs-collapse",{attrs:{title:"标题一"},on:{toggle:t.toggle}},[e("fs-button",[t._v("按钮")])],1),e("fs-collapse",{attrs:{title:"标题二"},on:{toggle:t.toggle}},[e("fs-button",{attrs:{size:"large"}},[t._v("按钮")])],1),e("fs-collapse",{on:{toggle:t.toggle}},[e("template",{slot:"title"},[t._v("标题三")]),e("fs-button",{attrs:{type:"plain"}},[t._v("按钮")])],2)],1)],1),e("fs-group",{attrs:{title:"只展开一个"}},[e("fs-collapse-group",{attrs:{single:""},model:{value:t.collapse2,callback:function(l){t.collapse2=l},expression:"collapse2"}},[e("fs-collapse",{attrs:{title:"标题一",name:"a"},on:{toggle:t.toggle}},[e("fs-button",[t._v("按钮")])],1),e("fs-collapse",{attrs:{title:"标题二",name:"b"},on:{toggle:t.toggle}},[e("fs-button",{attrs:{size:"large"}},[t._v("按钮")])],1),e("fs-collapse",{attrs:{name:"c"},on:{toggle:t.toggle}},[e("template",{slot:"title"},[t._v("标题三")]),e("fs-button",{attrs:{type:"plain"}},[t._v("按钮")])],2)],1)],1),e("p",[t._v("collapse: "+t._s(t.collapse))]),e("p",[t._v("collapse2: "+t._s(t.collapse2))]),e("p",[t._v("当前toggle name: "+t._s(t.name))])],1)};s._withStripped=!0;var o={data:function(){return{collapse:[],collapse2:"",name:""}},methods:{toggle:function(t){this.name=t}}},a=e(1),n=Object(a.a)(o,s,[],!1,null,null,null);n.options.__file="packages/collapse/demo/index.vue";l.default=n.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,